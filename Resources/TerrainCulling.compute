#pragma kernel ClearIndirectArgument
#pragma kernel ComputeFrustumCulling
#pragma kernel ComputeOcclusionCulling

#include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Core.hlsl"

struct TerrainPatch
{
    float4 rect;
    int mipmap;
    int neighbor;
    int hole;
    int padding2;
};

uint _OffsetParams;

float4 _CameraDrawParams;
float4 _CameraZBufferParams;
float4 _CameraFrustumPlanes[6];

float4x4 _CameraViewMatrix;
float4x4 _CameraViewProjection;

float4 _HizTexture_Size;

float4 _ShadowBias;
float3 _LightDirection;
float3 _TerrainSize;

Texture2D<float> _TerrainHeightMap;
Texture2D<float> _HizTexture;
SAMPLER(sampler_LinearClamp);

StructuredBuffer<TerrainPatch> _TerrainPatchBuffer;

RWStructuredBuffer<uint> _RWVisibleHoleIndexBuffer;
RWStructuredBuffer<uint> _RWVisibleHoleArgumentBuffer;
RWStructuredBuffer<uint> _RWVisiblePatchArgumentBuffer;
RWStructuredBuffer<uint> _RWVisiblePatchIndexBuffer;

#define _CameraInvFov _CameraDrawParams.x
#define _CameraMipScale _CameraDrawParams.y
#define _CameraDrawDistance _CameraDrawParams.y
#define _CameraDrawSensity _CameraDrawParams.z

float ProjectSphere(float4 sph, float4x4 cam, float fl)
{
    float3 o = mul(cam, float4(sph.xyz, 1.0)).xyz;

    float r2 = sph.w*sph.w;
    float z2 = o.z*o.z;
    float l2 = dot(o,o);

    return abs(-3.141592654 * fl * fl * r2 * sqrt(abs((l2-r2)/(r2-z2))) / (r2 - z2));
}

bool ComputePlaneSphereIntersection(float4 plane, float3 center, float radius)
{
    float dist = dot(center, normalize(plane.xyz)) + plane.w;
    return dist >= radius;
}

bool ComputeFrustumBoxIntersection(float3 minPoint, float3 maxPoint)
{
    for( int i = 0; i < 6; i++ )
    {
        int test = 0;
        test += ((dot(_CameraFrustumPlanes[i], float4(minPoint.x, minPoint.y, minPoint.z, 1.0f) ) < 0.0 )?1:0);
        test += ((dot(_CameraFrustumPlanes[i], float4(maxPoint.x, minPoint.y, minPoint.z, 1.0f) ) < 0.0 )?1:0);
        test += ((dot(_CameraFrustumPlanes[i], float4(minPoint.x, maxPoint.y, minPoint.z, 1.0f) ) < 0.0 )?1:0);
        test += ((dot(_CameraFrustumPlanes[i], float4(maxPoint.x, maxPoint.y, minPoint.z, 1.0f) ) < 0.0 )?1:0);
        test += ((dot(_CameraFrustumPlanes[i], float4(minPoint.x, minPoint.y, maxPoint.z, 1.0f) ) < 0.0 )?1:0);
        test += ((dot(_CameraFrustumPlanes[i], float4(maxPoint.x, minPoint.y, maxPoint.z, 1.0f) ) < 0.0 )?1:0);
        test += ((dot(_CameraFrustumPlanes[i], float4(minPoint.x, maxPoint.y, maxPoint.z, 1.0f) ) < 0.0 )?1:0);
        test += ((dot(_CameraFrustumPlanes[i], float4(maxPoint.x, maxPoint.y, maxPoint.z, 1.0f) ) < 0.0 )?1:0);
        
        if(test == 8) return false;
    }

    return true;
}

float3 ApplyShadowBias(float3 positionWS, float3 normalWS, float3 lightDirection)
{
    float invNdotL = 1.0 - saturate(dot(lightDirection, normalWS));
    float scale = invNdotL * _ShadowBias.y;

    // normal bias is negative since we want to apply an inset normal offset
    positionWS = lightDirection * _ShadowBias.xxx + positionWS;
    positionWS = normalWS * scale.xxx + positionWS;
    return positionWS;
}

[numthreads(1, 1, 1)]
void ClearIndirectArgument(uint3 id : SV_DispatchThreadID)
{
    _RWVisibleHoleArgumentBuffer[1] = 0;
    _RWVisiblePatchArgumentBuffer[1] = 0;
}

[numthreads(64, 1, 1)]
void ComputeFrustumCulling(uint3 id : SV_DispatchThreadID)
{
    uint instanceIndex = id.x;
    if (instanceIndex < _OffsetParams)
    {
        float4 rect = _TerrainPatchBuffer[id.x].rect;

        float2 minPos = rect.xy * 0.9;
        float2 maxPos = rect.xy + rect.zw;

        float2 minUV = minPos / _TerrainSize.xz;
        float2 maxUV = maxPos / _TerrainSize.xz;

        float minHeight = UnpackHeightmap(SAMPLE_TEXTURE2D_LOD(_TerrainHeightMap, sampler_LinearClamp, minUV, 0));
        float maxHeight = UnpackHeightmap(SAMPLE_TEXTURE2D_LOD(_TerrainHeightMap, sampler_LinearClamp, maxUV, 0));

        float3 minPoint = float3(minPos.x, minHeight * _TerrainSize.y * 2, minPos.y);
        float3 maxPoint = float3(maxPos.x, maxHeight * _TerrainSize.y * 2, maxPos.y);

        if (ComputeFrustumBoxIntersection(minPoint, maxPoint))
        {
            if (_TerrainPatchBuffer[id.x].hole)
            {
                uint index = 0;
                InterlockedAdd(_RWVisibleHoleArgumentBuffer[1], 1, index);
                _RWVisibleHoleIndexBuffer[index] = id.x;
            }
            else
            {
                uint index = 0;
                InterlockedAdd(_RWVisiblePatchArgumentBuffer[1], 1, index);
                _RWVisiblePatchIndexBuffer[index] = id.x;
            }
        }
    }
}

[numthreads(64, 1, 1)]
void ComputeOcclusionCulling(uint3 id : SV_DispatchThreadID)
{
    uint instanceIndex = id.x;
    if (instanceIndex < _OffsetParams)
    {
        float4 rect = _TerrainPatchBuffer[id.x].rect;

        float2 minPos = rect.xy * 0.9;
        float2 maxPos = rect.xy + rect.zw;

        float2 minUV = minPos / _TerrainSize.xz;
        float2 maxUV = maxPos / _TerrainSize.xz;

        float minHeight = UnpackHeightmap(SAMPLE_TEXTURE2D_LOD(_TerrainHeightMap, sampler_LinearClamp, minUV, 0));
        float maxHeight = UnpackHeightmap(SAMPLE_TEXTURE2D_LOD(_TerrainHeightMap, sampler_LinearClamp, maxUV, 0));

        float3 minPoint = float3(minPos.x, minHeight * _TerrainSize.y * 2, minPos.y);
        float3 maxPoint = float3(maxPos.x, maxHeight * _TerrainSize.y * 2, maxPos.y);

        if (ComputeFrustumBoxIntersection(minPoint, maxPoint))
        {
            float3 extents = (maxPoint - minPoint) * 0.5;
            float3 center = minPoint + extents;
            float radius = length(extents);

            float area = sqrt(ProjectSphere(float4(center, radius), _CameraViewMatrix, _CameraInvFov));
            if (area > 0)
            {
                float4 centerCS = mul(_CameraViewProjection, float4(center, 1.0));
                centerCS.xy /= centerCS.w;
                centerCS.w -= radius;

                uint mips = clamp(area * _CameraMipScale, 0, 6);
                uint scale = 1 << mips;
                uint2 uv = (centerCS.xy * 0.5f + 0.5f) * _HizTexture_Size.xy / scale;

                float4 depth;
                depth.x = _HizTexture.mips[mips][uv];
                depth.y = _HizTexture.mips[mips][uv + uint2(1, 0)];
                depth.z = _HizTexture.mips[mips][uv + uint2(-1, 0)];
                depth.w = _HizTexture.mips[mips][uv + uint2(0, 1)];

#if defined(SHADER_API_GLCORE) || defined(SHADER_API_GLES) || defined(SHADER_API_GLES3)
                float deviceHizDepth = max(depth.x, max(depth.y, max(depth.z, depth.w)));
#else
                float deviceHizDepth = min(depth.x, min(depth.y, min(depth.z, depth.w)));
#endif

                if (centerCS.w < LinearEyeDepth(deviceHizDepth, _CameraZBufferParams))
                {
                    if (_TerrainPatchBuffer[id.x].hole)
                    {
                        uint index = 0;
                        InterlockedAdd(_RWVisibleHoleArgumentBuffer[1], 1, index);
                        _RWVisibleHoleIndexBuffer[index] = id.x;
                    }
                    else
                    {
                        uint index = 0;
                        InterlockedAdd(_RWVisiblePatchArgumentBuffer[1], 1, index);
                        _RWVisiblePatchIndexBuffer[index] = id.x;
                    }
                }
            }
        }
    }
}