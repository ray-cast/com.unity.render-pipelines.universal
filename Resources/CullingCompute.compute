#pragma kernel ClearIndirectArgument
#pragma kernel ComputeFrustumCulling
#pragma kernel ComputeOcclusionCulling

#include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Core.hlsl"
#include "Packages/com.unity.render-pipelines.universal/Shaders/PostProcessing/Common.hlsl"

float _CameraFov;
float _CameraDrawDistance;
float4x4 _CameraViewProjection;

uint _StartOffset;
uint _EndOffset;
float3 _Offset;

float4 _HizTexture_TexelSize;
Texture2D<float> _HizTexture;

StructuredBuffer<float3> _AllInstancesPosWSBuffer;

RWStructuredBuffer<uint> _RWVisibleInstancesIndexBuffer;
RWStructuredBuffer<uint> _RWVisibleIndirectArgumentBuffer;

[numthreads(1, 1, 1)]
void ClearIndirectArgument(uint3 id : SV_DispatchThreadID)
{
	_RWVisibleIndirectArgumentBuffer[1] = 0;
}

[numthreads(64, 1, 1)]
void ComputeFrustumCulling(uint3 id : SV_DispatchThreadID)
{
	uint instanceIndex = id.x + _StartOffset;
	if (instanceIndex < _EndOffset)
	{
		float4 posCS = mul(_CameraViewProjection, float4(_AllInstancesPosWSBuffer[instanceIndex], 1.0));
		posCS /= posCS.w;
		posCS.xy = posCS.xy * 0.5f + 0.5f;

		float4 absPosCS = abs(posCS);
		if (absPosCS.x <= 1.0f && absPosCS.y <= 1.0f && absPosCS.w <= _CameraDrawDistance)
		{
			uint index = 0;
			InterlockedAdd(_RWVisibleIndirectArgumentBuffer[1], 1, index);
			_RWVisibleInstancesIndexBuffer[index] = instanceIndex;
		}
	}
}

[numthreads(64, 1, 1)]
void ComputeOcclusionCulling(uint3 id : SV_DispatchThreadID)
{
	uint instanceIndex = id.x + _StartOffset;
	if (instanceIndex < _EndOffset)
	{
		float4 posCS = mul(_CameraViewProjection, float4(_AllInstancesPosWSBuffer[instanceIndex] + _Offset, 1.0));
		posCS.xy /= posCS.w;
		posCS.xy = posCS.xy * 0.5f + 0.5f;

		float4 absPosCS = abs(posCS);
		if (absPosCS.x <= 1.0f && absPosCS.y <= 1.0f && absPosCS.w <= _CameraDrawDistance)
		{
			uint mips = clamp(log2(posCS.z * posCS.z * _CameraFov / 1024), 0, 6);
			uint scale = 1 << mips;
			uint2 uv = _HizTexture_TexelSize.xy / scale * posCS.xy;

			float4 depth;
			depth.x = _HizTexture.mips[mips][uv];
			depth.y = _HizTexture.mips[mips][uv + uint2(1, 0)];
			depth.z = _HizTexture.mips[mips][uv + uint2(1, 1)];
			depth.w = _HizTexture.mips[mips][uv + uint2(0, 1)];

#if defined(SHADER_API_GLCORE) || defined(SHADER_API_GLES) || defined(SHADER_API_GLES3)
			float farDepth = max(depth.x, max(depth.y, max(depth.z, depth.w)));
#else
			float farDepth = 1 - min(depth.x, min(depth.y, min(depth.z, depth.w)));
#endif

			if (posCS.z / posCS.w < farDepth)
			{
				uint index = 0;
				InterlockedAdd(_RWVisibleIndirectArgumentBuffer[1], 1, index);
				_RWVisibleInstancesIndexBuffer[index] = instanceIndex;
			}
		}
	}
}