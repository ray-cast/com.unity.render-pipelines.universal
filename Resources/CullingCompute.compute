#pragma kernel ClearIndirectArgument
#pragma kernel ComputeFrustumCulling
#pragma kernel ComputeOcclusionCulling

#include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Core.hlsl"

float3 _BoundMin;
float3 _BoundMax;

float4 _CameraDrawParams;
float4 _CameraZBufferParams;
float4 _CameraFrustumPlanes[6];
float4x4 _CameraViewMatrix;
float4x4 _CameraViewProjection;

float4x4 _PivotMatrixWS;

uint _StartOffset;
uint _EndOffset;

float4 _HizTexture_TexelSize;
Texture2D<float> _HizTexture;

StructuredBuffer<float3> _AllInstancesDataBuffer;

RWStructuredBuffer<uint> _RWVisibleInstancesIndexBuffer;
RWStructuredBuffer<uint> _RWVisibleIndirectArgumentBuffer;

#define _CameraInvFov _CameraDrawParams.x
#define _CameraMipScale _CameraDrawParams.y
#define _CameraDrawDistance _CameraDrawParams.z
#define _CameraDrawDistanceSensity _CameraDrawParams.w

float ComputeSphereProject(float4 sph, float4x4 cam, float fl)
{
    // transform to camera space
    float3 o = mul(cam, float4(sph.xyz, 1.0)).xyz;

    float r2 = sph.w*sph.w;
    float z2 = o.z*o.z;
    float l2 = dot(o,o);

    return abs(-3.141592654 * fl * fl * r2 * sqrt(abs((l2-r2)/(r2-z2)))/(r2-z2));
}

bool ComputeFrustumBoxIntersection(float3 minPoint, float3 maxPoint)
{
    for( int i = 0; i < 6; i++ )
    {
        int test = 0;
        test += ((dot(_CameraFrustumPlanes[i], float4(minPoint.x, minPoint.y, minPoint.z, 1.0f) ) < 0.0 )?1:0);
        test += ((dot(_CameraFrustumPlanes[i], float4(maxPoint.x, minPoint.y, minPoint.z, 1.0f) ) < 0.0 )?1:0);
        test += ((dot(_CameraFrustumPlanes[i], float4(minPoint.x, maxPoint.y, minPoint.z, 1.0f) ) < 0.0 )?1:0);
        test += ((dot(_CameraFrustumPlanes[i], float4(maxPoint.x, maxPoint.y, minPoint.z, 1.0f) ) < 0.0 )?1:0);
        test += ((dot(_CameraFrustumPlanes[i], float4(minPoint.x, minPoint.y, maxPoint.z, 1.0f) ) < 0.0 )?1:0);
        test += ((dot(_CameraFrustumPlanes[i], float4(maxPoint.x, minPoint.y, maxPoint.z, 1.0f) ) < 0.0 )?1:0);
        test += ((dot(_CameraFrustumPlanes[i], float4(minPoint.x, maxPoint.y, maxPoint.z, 1.0f) ) < 0.0 )?1:0);
        test += ((dot(_CameraFrustumPlanes[i], float4(maxPoint.x, maxPoint.y, maxPoint.z, 1.0f) ) < 0.0 )?1:0);
        
        if(test == 8) return false;
    }

    return true;
}

[numthreads(1, 1, 1)]
void ClearIndirectArgument(uint3 id : SV_DispatchThreadID)
{
	_RWVisibleIndirectArgumentBuffer[1] = 0;
}

[numthreads(64, 1, 1)]
void ComputeFrustumCulling(uint3 id : SV_DispatchThreadID)
{
	uint instanceIndex = id.x + _StartOffset;
	if (instanceIndex < _EndOffset)
	{
		float3 worldPosition = _AllInstancesDataBuffer[instanceIndex];

        float3 minPoint = worldPosition + _BoundMin;
        float3 maxPoint = worldPosition + _BoundMax;

		float3 extents = (maxPoint - minPoint) * 0.5h;
		float3 center = minPoint + extents;
		float radius = length(extents);

		float4 centerCS = mul(_CameraViewProjection, float4(center, 1.0));
		centerCS.xy /= centerCS.w;

		float distanceThreshold = 1 - saturate(abs(centerCS.w) / _CameraDrawDistance);

		float hash = GenerateHashedRandomFloat(center * 100);
		hash = lerp(0, hash, saturate(centerCS.w / (_CameraDrawDistance * _CameraDrawDistanceSensity) - 1));

		if (distanceThreshold < 1.0f && hash < distanceThreshold)
		{
        	if (ComputeFrustumBoxIntersection(minPoint, maxPoint))
        	{
				uint index = 0;
				InterlockedAdd(_RWVisibleIndirectArgumentBuffer[1], 1, index);
				_RWVisibleInstancesIndexBuffer[index] = instanceIndex;
			}
        }
	}
}

[numthreads(64, 1, 1)]
void ComputeOcclusionCulling(uint3 id : SV_DispatchThreadID)
{
	uint instanceIndex = id.x + _StartOffset;
	if (instanceIndex < _EndOffset)
	{
		float3 worldPosition = _AllInstancesDataBuffer[instanceIndex];

        float3 minPoint = worldPosition + _BoundMin;
        float3 maxPoint = worldPosition + _BoundMax;

		float3 extents = (maxPoint - minPoint) * 0.5h;
		float3 center = minPoint + extents;
		float radius = length(extents);

		float4 centerCS = mul(_CameraViewProjection, float4(center, 1.0));
		centerCS.xy /= centerCS.w;
		centerCS.w -= radius;

		float distanceThreshold = 1 - saturate(abs(centerCS.w) / _CameraDrawDistance);

		float hash = GenerateHashedRandomFloat(center * 100);
		hash = lerp(0, hash, saturate(centerCS.w / (_CameraDrawDistance * _CameraDrawDistanceSensity) - 1));

		if (distanceThreshold < 1.0f && hash < distanceThreshold)
		{
        	if (ComputeFrustumBoxIntersection(minPoint, maxPoint))
        	{
				float area = sqrt(ComputeSphereProject(float4(center, radius), _CameraViewMatrix, _CameraInvFov));
				uint mips = clamp(area * _CameraMipScale, 0, 6);
				uint scale = 1 << mips;
				uint2 uv = (centerCS.xy * 0.5f + 0.5f) * _HizTexture_TexelSize.xy / scale;

				float4 depth;
				depth.x = _HizTexture.mips[mips][uv];
				depth.y = _HizTexture.mips[mips][uv + uint2(1, 0)];
				depth.z = _HizTexture.mips[mips][uv + uint2(1, 1)];
				depth.w = _HizTexture.mips[mips][uv + uint2(0, 1)];

	#if defined(SHADER_API_GLCORE) || defined(SHADER_API_GLES) || defined(SHADER_API_GLES3)
				float deviceHizDepth = max(depth.x, max(depth.y, max(depth.z, depth.w)));
	#else
				float deviceHizDepth = min(depth.x, min(depth.y, min(depth.z, depth.w)));
	#endif

				if (centerCS.w < LinearEyeDepth(deviceHizDepth, _CameraZBufferParams))
				{
					uint index = 0;
					InterlockedAdd(_RWVisibleIndirectArgumentBuffer[1], 1, index);
					_RWVisibleInstancesIndexBuffer[index] = instanceIndex;
				}
			}
        }
	}
}